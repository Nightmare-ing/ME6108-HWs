import math

import numpy as np

def bresenham_line(start, end, subdivision):
    """
    Return a numpy array of discrete points generated by Bresenhan algorithm
    :param start: start point of the line
    :param end: end point of the line
    :param subdivision: number of divisions of the line
    :return: numpy, array of discrete points generated by Bresenhan algorithm
    """
    pixel_x = np.zeros(subdivision)
    pixel_y = np.zeros(subdivision)
    x = start[0]
    y = start[1]
    unit = (end[0] - start[0]) / subdivision
    k = float(end[1] - start[1]) / float(end[0] - start[0])
    e = -0.5
    for i in range(subdivision):
        pixel_x[i] = x
        pixel_y[i] = y
        x = x + unit
        e = e + k
        if e >= 0:
            y = y + unit
            # when move up for one pixel, should also compare with 0.5,
            # but is the higher 0.5, but now the position is negative,
            # so it's e - 1
            e = e - 1

    return pixel_x, pixel_y